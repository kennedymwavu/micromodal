[{"path":"http://mwavu.com/micromodal/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 micromodal authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://mwavu.com/micromodal/articles/micromodal.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Introduction to micromodal","text":"goal micromodal create simple elegant modal dialogs WAI-ARIA guidelines compliant minimal configuration. Things keep mind: modal’s trigger (usually button link) must attribute data-micromodal-trigger value modal’s id. modal id “modal-1”, : need add something dismiss modal (eg. button link), give attribute data-micromodal-close. shiny equivalent :","code":"`data-micromodal-trigger` = \"modal-1\" `data-micromodal-close` = NA"},{"path":"http://mwavu.com/micromodal/articles/micromodal.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Introduction to micromodal","text":"See live demo .","code":""},{"path":"http://mwavu.com/micromodal/articles/micromodal.html","id":"simple-usage","dir":"Articles","previous_headings":"Examples","what":"Simple usage","title":"Introduction to micromodal","text":"Though bit long, example clearly depicts know using micromodal.","code":"library(shiny) library(micromodal)  server <- \\(input, output, session) {    }  ui <- bslib::page(   title = \"Micromodal\",   theme = bslib::bs_theme(version = 5),   # inform shiny to use {micromodal}:   use_micromodal(),   # your normal UI code:   tags$div(     class = \"container\",     tags$div(       class = \"container my-5\",       tags$h1(\"Micromodal.js in Shiny\", class = \"mb-5\"),       # trigger for \"modal-1\"       actionButton(         inputId = \"show_modal_1\",         label = \"Exhibit 1\",         class = \"btn-outline-primary px-3\",         `data-micromodal-trigger` = \"modal-1\"       ),       # trigger for \"modal-2\"       actionButton(         inputId = \"show_modal_2\",         label = \"Exhibit 2\",         class = \"btn-outline-primary px-3\",         `data-micromodal-trigger` = \"modal-2\"       )     ),     # modal-1:     micromodal(       id = \"modal-1\",       title = \"Login\",       content = tagList(         textInput(           inputId = \"name\",           label = \"Name\",           width = \"400px\"         ),         passwordInput(           inputId = \"password\",           label = tags$div(             tags$span(\"Password\"),             tags$span(\"(required)\", class = \"text-muted fw-light\")           ),           width = \"400px\"         ) |> tagAppendAttributes(class = \"mb-0\"),         tags$div(           \"Must be atleast 6 characters long.\",           class = \"text-muted fw-light\"         )       ),       footer = tagList(         tags$button(           class = \"modal__btn modal__btn-primary\",           \"Continue\"         ),         tags$a(           href = \"#\",           class = \"ms-3\",           `data-micromodal-close` = NA,           `aria-label` = \"Close this dialog window\",           \"Cancel\"         )       )     ),     # modal-2:     micromodal(       id = \"modal-2\",       title = \"Micromodal\",       content = tagList(         tags$p(\"This is a completely accessible modal.\"),         tags$p(           \"Try hitting the\",           tags$code(\"tab\"),           \"key* and notice how the focus stays\",           \"within the modal itself. To close modal hit the\",           tags$code(\"esc\"),           \"button, click on the overlay or just click the close button.\"         ),         tags$p(\"*\", tags$code(\"alt + tab\"), \"in safari\")       ),       footer = tagList(         tags$button(           class = \"modal__btn modal__btn-primary\",           \"Continue\"         ),         tags$button(           class = \"modal__btn ms-2\",           `data-micromodal-close` = NA,           `aria-label` = \"Close this dialog window\",           \"Close\"         )       )     )   ) )  shinyApp(ui, server)"},{"path":"http://mwavu.com/micromodal/articles/micromodal.html","id":"with-uioutput-renderui","dir":"Articles","previous_headings":"Examples","what":"With uiOutput + renderUI","title":"Introduction to micromodal","text":"need , can render modal ’s trigger dynamically.","code":""},{"path":"http://mwavu.com/micromodal/articles/micromodal.html","id":"i--render-modal","dir":"Articles","previous_headings":"Examples > With uiOutput + renderUI","what":"I. Render modal","title":"Introduction to micromodal","text":"","code":"library(shiny) library(micromodal)  ui <- fluidPage(   use_micromodal(),   selectInput(     inputId = \"selector\",     label = \"Pick a letter\",     choices = letters   ),   actionButton(     inputId = \"trigger\",     label = \"Trigger modal\",     `data-micromodal-trigger` = \"modal-1\"   ),   uiOutput(outputId = \"mymodal\") )  server <- \\(input, output, session) {   output$mymodal <- renderUI({     tagList(       micromodal(         id = \"modal-1\",         title = \"Rendered serverside\",         content = tagList(           tags$p(             \"You selected the letter '\",             input$selector,             \"'\"           )         )       )     )   }) }  shinyApp(ui, server)"},{"path":"http://mwavu.com/micromodal/articles/micromodal.html","id":"ii--render-modal-trigger","dir":"Articles","previous_headings":"Examples > With uiOutput + renderUI","what":"II. Render modal + trigger","title":"Introduction to micromodal","text":"NB: micromodal might work *Output + render* eg. plotOutput()","code":"library(shiny) library(micromodal)  ui <- fluidPage(   use_micromodal(),   selectInput(     inputId = \"selector\",     label = \"Pick a letter\",     choices = letters   ),   uiOutput(outputId = \"mymodal\") )  server <- \\(input, output, session) {   output$mymodal <- renderUI({     tagList(       actionButton(         inputId = \"trigger\",         label = \"Trigger modal\",         `data-micromodal-trigger` = \"modal-1\"       ),       micromodal(         id = \"modal-1\",         title = \"Rendered serverside\",         content = tagList(           tags$p(             \"You selected the letter '\",             input$selector,             \"'\"           )         )       )     )   }) }  shinyApp(ui, server)"},{"path":"http://mwavu.com/micromodal/articles/micromodal.html","id":"inside-modules","dir":"Articles","previous_headings":"Examples","what":"Inside modules","title":"Introduction to micromodal","text":"far usage micromodal modules concerned, need remind one thing: ’s always missing call NS() Thank later.","code":"library(shiny) library(micromodal)  # module UI: sayhi_ui <- \\(id) {   ns <- NS(id)   tagList(     tags$h1(\"Hello\"),     actionLink(       inputId = ns(\"sayhi\"),       label = \"Say Hi\",       `data-micromodal-trigger` = ns(\"greetings_modal\")     ),     micromodal(       id = ns(\"greetings_modal\"),       title = \"Greetings folks!\",       content = tags$p(         \"I'd like to thank you for joining us here today.\"       )     )   ) }  # module server is not necessary in our case, just putting it here  # for formality: sayhi_server <- \\(id) {   moduleServer(     id = id,     module = \\(input, output, session) {            }   ) }  ui <- bslib::page(   title = \"In Modules\",   theme = bslib::bs_theme(version = 5),   use_micromodal(),   tags$div(     class = \"container\",     sayhi_ui(\"hi\")   ) )  server <- \\(input, output, session) {}  shinyApp(ui, server)"},{"path":"http://mwavu.com/micromodal/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kennedy Mwavu. Author, maintainer, copyright holder.            Maintainer/developer micromodal since 2023","code":""},{"path":"http://mwavu.com/micromodal/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mwavu K (2023). micromodal: Create Simple Elegant Modal Dialogs 'shiny'. https://github.com/kennedymwavu/micromodal, https://mwavu.com/micromodal/.","code":"@Manual{,   title = {micromodal: Create Simple and Elegant Modal Dialogs in 'shiny'},   author = {Kennedy Mwavu},   year = {2023},   note = {https://github.com/kennedymwavu/micromodal, https://mwavu.com/micromodal/}, }"},{"path":"http://mwavu.com/micromodal/index.html","id":"micromodal","dir":"","previous_headings":"","what":"Create Simple and Elegant Modal Dialogs in shiny","title":"Create Simple and Elegant Modal Dialogs in shiny","text":"Modal dialogs R Shiny via Micromodal.js.","code":""},{"path":"http://mwavu.com/micromodal/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Simple and Elegant Modal Dialogs in shiny","text":"install package CRAN use: can install dev version micromodal :","code":"install.packages(\"micromodal\") remotes::install_github(\"kennedymwavu/micromodal\")"},{"path":"http://mwavu.com/micromodal/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Create Simple and Elegant Modal Dialogs in shiny","text":"Call use_micromodal() anywhere UI, . Add trigger modal. usually button link. Give attribute data-micromodal-trigger value modal’s id. Make modal. Use micromodal() . ’s . ’s full reprex: See live demo .","code":"library(shiny) library(micromodal)  ui <- fluidPage(   use_micromodal(),   # the rest of your UI code ) ui <- fluidPage(   use_micromodal(),   actionButton(     inputId = \"trigger\",     label = \"Trigger modal\",     `data-micromodal-trigger` = \"modal-1\"   ),   # the rest of your UI code ) ui <- fluidPage(   use_micromodal(),   actionButton(     inputId = \"trigger\",     label = \"Trigger modal\",     `data-micromodal-trigger` = \"modal-1\"   ),   micromodal(     id = \"modal-1\",     title = \"Hello, World!\",     content = tagList(       tags$p(\"Hi Mom,\"),       tags$p(\"Come see my first modal!\")     )   ) ) library(shiny) library(micromodal)  ui <- fluidPage(   use_micromodal(),   actionButton(     inputId = \"trigger\",     label = \"Trigger modal\",     `data-micromodal-trigger` = \"modal-1\"   ),   micromodal(     id = \"modal-1\",     title = \"Hello, World!\",     content = tagList(       tags$p(\"Hi Mom,\"),       tags$p(\"Come see my first modal!\")     )   ) )  server <- \\(input, output, session) {}  shinyApp(ui, server)"},{"path":"http://mwavu.com/micromodal/index.html","id":"about","dir":"","previous_headings":"","what":"About","title":"Create Simple and Elegant Modal Dialogs in shiny","text":"’re reading doc version: 1.0.0 README compiled :","code":"Sys.time() #> [1] \"2023-08-18 04:38:04 EAT\""},{"path":"http://mwavu.com/micromodal/reference/get_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get package dependencies — get_dependencies","title":"Get package dependencies — get_dependencies","text":"Get package dependencies","code":""},{"path":"http://mwavu.com/micromodal/reference/get_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get package dependencies — get_dependencies","text":"","code":"get_dependencies()"},{"path":"http://mwavu.com/micromodal/reference/micromodal.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a modal dialog — micromodal","title":"Create a modal dialog — micromodal","text":"Create modal dialog","code":""},{"path":"http://mwavu.com/micromodal/reference/micromodal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a modal dialog — micromodal","text":"","code":"micromodal(id, title = NULL, content = NULL, footer = NULL)"},{"path":"http://mwavu.com/micromodal/reference/micromodal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a modal dialog — micromodal","text":"id unique id modal title modal's title content modal's content footer modal's footer","code":""},{"path":"http://mwavu.com/micromodal/reference/micromodal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a modal dialog — micromodal","text":"htmltools::tagList()","code":""},{"path":"http://mwavu.com/micromodal/reference/micromodal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a modal dialog — micromodal","text":"","code":"# Example 1---- if (interactive()) {   library(shiny)   library(micromodal)    ui <- fluidPage(     use_micromodal(),     actionButton(       inputId = \"trigger\",       label = \"Trigger modal\",       `data-micromodal-trigger` = \"modal-1\"     ),     micromodal(       id = \"modal-1\",       title = \"Hello, World!\",       content = tagList(         tags$p(\"Hi Mom,\"),         tags$p(\"Come see my first modal!\")       )     )   )    server <- \\(input, output, session) {}    shinyApp(ui, server) }  # Example 2---- if (interactive()) {   library(shiny)   library(micromodal)    server <- \\(input, output, session) {    }    ui <- bslib::page(     title = \"Micromodal\",     theme = bslib::bs_theme(version = 5),     # inform shiny to use {micromodal}:     use_micromodal(),     # your normal UI code:     tags$div(       class = \"container\",       tags$div(         class = \"container my-5\",         tags$h1(\"Micromodal.js in Shiny\", class = \"mb-5\"),         # trigger for \"modal-1\"         actionButton(           inputId = \"show_modal_1\",           label = \"Exhibit 1\",           class = \"btn-outline-primary px-3\",           `data-micromodal-trigger` = \"modal-1\"         ),         # trigger for \"modal-2\"         actionButton(           inputId = \"show_modal_2\",           label = \"Exhibit 2\",           class = \"btn-outline-primary px-3\",           `data-micromodal-trigger` = \"modal-2\"         )       ),       # modal-1:       micromodal(         id = \"modal-1\",         title = \"Login\",         content = tagList(           textInput(             inputId = \"name\",             label = \"Name\",             width = \"400px\"           ),           passwordInput(             inputId = \"password\",             label = tags$div(               tags$span(\"Password\"),               tags$span(\"(required)\", class = \"text-muted fw-light\")             ),             width = \"400px\"           ) |> tagAppendAttributes(class = \"mb-0\"),           tags$div(             \"Must be atleast 6 characters long.\",             class = \"text-muted fw-light\"           )         ),         footer = tagList(           tags$button(             class = \"modal__btn modal__btn-primary\",             \"Continue\"           ),           tags$a(             href = \"#\",             class = \"ms-3\",             `data-micromodal-close` = NA,             `aria-label` = \"Close this dialog window\",             \"Cancel\"           )         )       ),       # modal-2:       micromodal(         id = \"modal-2\",         title = \"Micromodal\",         content = tagList(           tags$p(\"This is a completely accessible modal.\"),           tags$p(             \"Try hitting the\",             tags$code(\"tab\"),             \"key* and notice how the focus stays\",             \"within the modal itself. To close modal hit the\",             tags$code(\"esc\"),             \"button, click on the overlay or just click the close button.\"           ),           tags$p(\"*\", tags$code(\"alt + tab\"), \"in safari\")         ),         footer = tagList(           tags$button(             class = \"modal__btn modal__btn-primary\",             \"Continue\"           ),           tags$button(             class = \"modal__btn ms-2\",             `data-micromodal-close` = NA,             `aria-label` = \"Close this dialog window\",             \"Close\"           )         )       )     )   )    shinyApp(ui, server) }"},{"path":"http://mwavu.com/micromodal/reference/use_micromodal.html","id":null,"dir":"Reference","previous_headings":"","what":"Use micromodal — use_micromodal","title":"Use micromodal — use_micromodal","text":"Call function app's UI.","code":""},{"path":"http://mwavu.com/micromodal/reference/use_micromodal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use micromodal — use_micromodal","text":"","code":"use_micromodal()"},{"path":"http://mwavu.com/micromodal/reference/use_micromodal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use micromodal — use_micromodal","text":"htmltools::tagList()","code":""},{"path":"http://mwavu.com/micromodal/reference/use_micromodal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use micromodal — use_micromodal","text":"function adds dependencies needed modals. See micromodal() complete example.","code":""},{"path":"http://mwavu.com/micromodal/reference/use_micromodal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use micromodal — use_micromodal","text":"","code":"if (interactive()) {   library(shiny)   library(micromodal)    ui <- fluidPage(     use_micromodal(),     # the rest of your UI code   ) }"},{"path":"http://mwavu.com/micromodal/news/index.html","id":"micromodal-100","dir":"Changelog","previous_headings":"","what":"micromodal 1.0.0","title":"micromodal 1.0.0","text":"CRAN release: 2023-08-17 Added NEWS.md file track changes package.","code":""}]
